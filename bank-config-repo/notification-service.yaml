# src/main/resources/application.yml (Notification Microservice)

spring:
  application:
    name: notification-service

  datasource:
    url: jdbc:oracle:thin:@//localhost:1521/ORCL
    username: NOTIFY_MS
    password: notify123
    driver-class-name: oracle.jdbc.OracleDriver

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.OracleDialect

  security: # <--- ADD THIS SECTION FOR SECURITY CONFIGURATION
    oauth2:
      resourceserver:
        jwt:
          # This is the URL where Keycloak exposes its public keys (JWKS endpoint).
          # Spring Security will use this to validate the signature of incoming JWTs.
          # Replace 8080 with your Keycloak port, bank-realm with your realm name.
          jwk-set-uri: http://localhost:8080/realms/bank-realm/protocol/openid-connect/certs
          # Alternatively, you can use issuer-uri if you prefer. Spring will discover JWKS from here.
          # issuer-uri: http://localhost:8080/realms/bank-realm

  mail:
    host: smtp.gmail.com
    port: 587
    username: faizaltest204@gmail.com
    password: xytyyekfjvqtrmna
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true
      mail.smtp.ssl.trust: smtp.gmail.com
      mail.debug: true

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: notification-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.json.type.mapping: transaction-events:com.notification.event.TransactionCompletedEvent,kyc-status-events:com.notification.event.KycStatusUpdatedEvent,loan-status-events:com.notification.event.LoanStatusUpdatedEvent
        spring.json.trusted.packages: "com.notification.event"
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: latest

server:
  port: 8002

logging:
  level:
    org:
      springframework:
        web: DEBUG
      hibernate: ERROR
      io.github.resilience4j: DEBUG # Enable Resilience4j logging for better visibility
      org.springframework.security: DEBUG # Enable detailed Spring Security logging for JWT validation
      org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG # Log incoming requests
      org.hibernate.SQL: DEBUG # Log Hibernate generated SQL
      org.hibernate.type.descriptor.sql.BasicBinder: TRACE # Log SQL parameter binding
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/ # Point to your Eureka Server's URL
    register-with-eureka: true
    fetch-registry: true
  instance:
    preferIpAddress: true # Optional: Good for containerized environments
management:
  tracing:
    sampling:
      probability: 1.0

keycloak:
  service-client:
    url: http://localhost:8080
    realm: bank-realm
    client-id: notification-service-client
    client-secret: UQCtpCaZ02y9DQK8sMUcm03G9A6p88vD
