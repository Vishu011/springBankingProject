{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/api-client.service\";\nimport * as i2 from \"@angular/forms\";\nexport let CardsComponent = /*#__PURE__*/(() => {\n  class CardsComponent {\n    constructor(api, fb) {\n      this.api = api;\n      this.issuanceAppId = null;\n      this.issuanceStatus = null;\n      this.issuanceView = null;\n      // Results\n      this.createdCard = null;\n      this.fetchedCard = null;\n      this.customerCards = [];\n      // UI state\n      this.busy = false;\n      this.errorMsg = null;\n      this.issuanceForm = fb.group({\n        customerId: [null, [Validators.required, Validators.min(1)]],\n        productType: [\"CREDIT_CARD\"]\n      });\n      this.createDevForm = fb.group({\n        customerId: [null, [Validators.required, Validators.min(1)]],\n        productType: [\"CREDIT_CARD\"],\n        initialLimit: [5000, [Validators.min(1)]]\n      });\n      this.manageForm = fb.group({\n        cardId: [\"\"],\n        limit: [9000, [Validators.min(1)]],\n        status: [\"BLOCK\"]\n      });\n    }\n    clearError() {\n      this.errorMsg = null;\n    }\n    handleError(e) {\n      this.busy = false;\n      try {\n        // Standard error envelope { message, correlationId, ... }\n        if (e?.error?.message) {\n          const cid = e?.error?.correlationId ? ` | cid=${e.error.correlationId}` : \"\";\n          this.errorMsg = `${e.error.message}${cid}`;\n          return;\n        }\n      } catch {}\n      this.errorMsg = e?.message || \"Operation failed\";\n    }\n    // ===== Issuance Flow =====\n    submitIssuance() {\n      this.clearError();\n      if (this.issuanceForm.invalid) return;\n      this.busy = true;\n      const {\n        customerId,\n        productType\n      } = this.issuanceForm.value;\n      this.api.submitCardIssuance({\n        customerId,\n        productType\n      }).subscribe({\n        next: res => {\n          this.issuanceAppId = res.applicationId;\n          this.issuanceStatus = res.status;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    runEligibility() {\n      if (!this.issuanceAppId) return;\n      this.clearError();\n      this.busy = true;\n      this.api.runEligibility(this.issuanceAppId).subscribe({\n        next: view => {\n          this.issuanceView = view;\n          this.issuanceStatus = view?.status || this.issuanceStatus;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    approveIssuance() {\n      if (!this.issuanceAppId) return;\n      this.clearError();\n      this.busy = true;\n      this.api.approveIssuance(this.issuanceAppId).subscribe({\n        next: view => {\n          this.issuanceView = view;\n          this.issuanceStatus = view?.status || \"APPROVED\";\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    getCardByIssuanceApp() {\n      if (!this.issuanceAppId) return;\n      this.clearError();\n      this.busy = true;\n      this.api.getCardByIssuanceApp(this.issuanceAppId).subscribe({\n        next: card => {\n          this.fetchedCard = card;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    // ===== Management Dev Helpers =====\n    createCardDev() {\n      this.clearError();\n      if (this.createDevForm.invalid) return;\n      this.busy = true;\n      const {\n        customerId,\n        productType,\n        initialLimit\n      } = this.createDevForm.value;\n      this.api.createCardDev({\n        customerId,\n        productType,\n        initialLimit\n      }).subscribe({\n        next: res => {\n          this.createdCard = res;\n          this.manageForm.patchValue({\n            cardId: res.cardId\n          });\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    getCard() {\n      const cardId = this.manageForm.value.cardId;\n      if (!cardId) return;\n      this.clearError();\n      this.busy = true;\n      this.api.getCard(cardId).subscribe({\n        next: card => {\n          this.fetchedCard = card;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    activateCard() {\n      const cardId = this.manageForm.value.cardId;\n      if (!cardId) return;\n      this.clearError();\n      this.busy = true;\n      this.api.activateCard(cardId).subscribe({\n        next: card => {\n          this.fetchedCard = card;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    setLimits() {\n      const cardId = this.manageForm.value.cardId;\n      const limit = Number(this.manageForm.value.limit || 0);\n      if (!cardId || limit <= 0) return;\n      this.clearError();\n      this.busy = true;\n      this.api.setCardLimits(cardId, limit).subscribe({\n        next: card => {\n          this.fetchedCard = card;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    updateStatus() {\n      const cardId = this.manageForm.value.cardId;\n      const status = this.manageForm.value.status;\n      if (!cardId || !status) return;\n      this.clearError();\n      this.busy = true;\n      this.api.updateCardStatus(cardId, status).subscribe({\n        next: card => {\n          this.fetchedCard = card;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    listByCustomer() {\n      const cid = this.createDevForm.value.customerId;\n      if (!cid) return;\n      this.clearError();\n      this.busy = true;\n      this.api.listCardsByCustomer(Number(cid)).subscribe({\n        next: cards => {\n          this.customerCards = cards || [];\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    static {\n      this.ɵfac = function CardsComponent_Factory(t) {\n        return new (t || CardsComponent)(i0.ɵɵdirectiveInject(i1.ApiClientService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: CardsComponent,\n        selectors: [[\"app-cards\"]],\n        decls: 5,\n        vars: 0,\n        consts: [[1, \"card\"]],\n        template: function CardsComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h2\");\n            i0.ɵɵtext(1, \"Cards\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"div\", 0)(3, \"p\");\n            i0.ɵɵtext(4, \"Card issuance and management flows will appear here.\");\n            i0.ɵɵelementEnd()();\n          }\n        }\n      });\n    }\n  }\n  return CardsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}