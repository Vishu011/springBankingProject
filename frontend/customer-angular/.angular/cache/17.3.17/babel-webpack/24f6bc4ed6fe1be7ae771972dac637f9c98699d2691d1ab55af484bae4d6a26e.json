{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\n/**\n * Tracks in-flight HTTP requests to drive a global loading indicator.\n * Increments on request, decrements on response/finalize.\n */\nexport let LoadingService = /*#__PURE__*/(() => {\n  class LoadingService {\n    constructor() {\n      this.pending = 0;\n      this.subject = new BehaviorSubject(false);\n      this.isLoading$ = this.subject.asObservable();\n    }\n    start() {\n      this.pending++;\n      if (this.pending === 1) {\n        this.subject.next(true);\n      }\n    }\n    stop() {\n      if (this.pending > 0) {\n        this.pending--;\n        if (this.pending === 0) {\n          this.subject.next(false);\n        }\n      }\n    }\n    reset() {\n      this.pending = 0;\n      this.subject.next(false);\n    }\n    static {\n      this.ɵfac = function LoadingService_Factory(t) {\n        return new (t || LoadingService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: LoadingService,\n        factory: LoadingService.ɵfac,\n        providedIn: \"root\"\n      });\n    }\n  }\n  return LoadingService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}