{"ast":null,"code":"import { finalize } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/loading.service\";\n/**\n * Global HTTP loading interceptor.\n * - Starts loading on request\n * - Stops loading on response/error/finalize\n */\nexport let LoadingInterceptor = /*#__PURE__*/(() => {\n  class LoadingInterceptor {\n    constructor(loading) {\n      this.loading = loading;\n    }\n    intercept(req, next) {\n      this.loading.start();\n      return next.handle(req).pipe(finalize(() => this.loading.stop()));\n    }\n    static {\n      this.ɵfac = function LoadingInterceptor_Factory(t) {\n        return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.LoadingService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: LoadingInterceptor,\n        factory: LoadingInterceptor.ɵfac\n      });\n    }\n  }\n  return LoadingInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}