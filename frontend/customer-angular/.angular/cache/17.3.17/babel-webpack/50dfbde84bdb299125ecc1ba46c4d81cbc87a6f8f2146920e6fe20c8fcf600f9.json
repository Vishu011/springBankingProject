{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nfunction randomId() {\n  return \"t-\" + Math.random().toString(36).slice(2);\n}\nexport let ToastService = /*#__PURE__*/(() => {\n  class ToastService {\n    constructor() {\n      this.toastsSubject = new BehaviorSubject([]);\n      this.toasts$ = this.toastsSubject.asObservable();\n    }\n    show(message, type = \"info\", correlationId, durationMs = 5000) {\n      const toast = {\n        id: randomId(),\n        type,\n        message,\n        correlationId,\n        createdAt: Date.now()\n      };\n      const arr = [...this.toastsSubject.value, toast];\n      this.toastsSubject.next(arr);\n      if (durationMs > 0) {\n        setTimeout(() => this.remove(toast.id), durationMs);\n      }\n    }\n    success(message, durationMs = 4000) {\n      this.show(message, \"success\", undefined, durationMs);\n    }\n    error(message, correlationId, durationMs = 7000) {\n      this.show(message, \"error\", correlationId, durationMs);\n    }\n    info(message, durationMs = 4000) {\n      this.show(message, \"info\", undefined, durationMs);\n    }\n    remove(id) {\n      const arr = this.toastsSubject.value.filter(t => t.id !== id);\n      this.toastsSubject.next(arr);\n    }\n    clear() {\n      this.toastsSubject.next([]);\n    }\n    static {\n      this.ɵfac = function ToastService_Factory(t) {\n        return new (t || ToastService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ToastService,\n        factory: ToastService.ɵfac,\n        providedIn: \"root\"\n      });\n    }\n  }\n  return ToastService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}