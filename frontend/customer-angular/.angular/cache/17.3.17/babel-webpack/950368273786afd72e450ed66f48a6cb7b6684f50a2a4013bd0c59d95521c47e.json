{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/api-client.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction PaymentsComponent_b_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"b\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.fromBalance);\n  }\n}\nfunction PaymentsComponent_span_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"-\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PaymentsComponent_b_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"b\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.toBalance);\n  }\n}\nfunction PaymentsComponent_span_46_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"-\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PaymentsComponent_div_47_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵtext(1, \"Working...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PaymentsComponent_div_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"b\");\n    i0.ɵɵtext(2, \"Error:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMsg, \"\\n\");\n  }\n}\nexport let PaymentsComponent = /*#__PURE__*/(() => {\n  class PaymentsComponent {\n    constructor(api, fb) {\n      this.api = api;\n      this.paymentId = null;\n      this.status = null;\n      this.fromBalance = null;\n      this.toBalance = null;\n      this.busy = false;\n      this.errorMsg = null;\n      this.transferForm = fb.group({\n        customerId: [null, [Validators.required, Validators.min(1)]],\n        fromAccount: [\"\", [Validators.required]],\n        toAccount: [\"\", [Validators.required]],\n        amount: [100, [Validators.required, Validators.min(0.01)]],\n        currency: [\"USD\", [Validators.required]]\n      });\n    }\n    clearError() {\n      this.errorMsg = null;\n    }\n    handleError(e) {\n      this.busy = false;\n      try {\n        if (e?.error?.message) {\n          const cid = e?.error?.correlationId ? ` | cid=${e.error.correlationId}` : \"\";\n          this.errorMsg = `${e.error.message}${cid}`;\n          return;\n        }\n      } catch {}\n      this.errorMsg = e?.message || \"Operation failed\";\n    }\n    initiate() {\n      if (this.transferForm.invalid) return;\n      this.clearError();\n      this.busy = true;\n      const {\n        customerId,\n        fromAccount,\n        toAccount,\n        amount,\n        currency\n      } = this.transferForm.value;\n      this.api.initiateInternalTransfer({\n        customerId: Number(customerId),\n        fromAccount,\n        toAccount,\n        amount: Number(amount),\n        currency\n      }).subscribe({\n        next: res => {\n          this.paymentId = res.paymentId || null;\n          this.status = res.status || null;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    pollStatus() {\n      if (!this.paymentId) return;\n      this.clearError();\n      this.busy = true;\n      this.api.getPaymentStatus(this.paymentId).subscribe({\n        next: s => {\n          this.status = typeof s === \"string\" ? s : s?.status || this.status;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    readBalances() {\n      const {\n        fromAccount,\n        toAccount\n      } = this.transferForm.value;\n      if (!fromAccount || !toAccount) return;\n      this.clearError();\n      this.busy = true;\n      let pending = 2;\n      const done = () => {\n        pending -= 1;\n        if (pending === 0) this.busy = false;\n      };\n      this.api.getBalance(fromAccount).subscribe({\n        next: b => {\n          this.fromBalance = Number(b);\n          done();\n        },\n        error: e => {\n          this.handleError(e);\n          done();\n        }\n      });\n      this.api.getBalance(toAccount).subscribe({\n        next: b => {\n          this.toBalance = Number(b);\n          done();\n        },\n        error: e => {\n          this.handleError(e);\n          done();\n        }\n      });\n    }\n    static {\n      this.ɵfac = function PaymentsComponent_Factory(t) {\n        return new (t || PaymentsComponent)(i0.ɵɵdirectiveInject(i1.ApiClientService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: PaymentsComponent,\n        selectors: [[\"app-payments\"]],\n        decls: 49,\n        vars: 12,\n        consts: [[1, \"card\"], [3, \"ngSubmit\", \"formGroup\"], [2, \"display\", \"flex\", \"gap\", \"12px\", \"flex-wrap\", \"wrap\"], [\"type\", \"number\", \"formControlName\", \"customerId\", \"placeholder\", \"e.g. 1001\"], [\"type\", \"text\", \"formControlName\", \"fromAccount\", \"placeholder\", \"FROM account number\"], [\"type\", \"text\", \"formControlName\", \"toAccount\", \"placeholder\", \"TO account number\"], [\"type\", \"number\", \"step\", \"0.01\", \"formControlName\", \"amount\", \"placeholder\", \"100.00\"], [\"formControlName\", \"currency\"], [\"value\", \"USD\"], [\"type\", \"submit\", 3, \"disabled\"], [2, \"margin-top\", \"10px\", \"display\", \"flex\", \"gap\", \"8px\", \"flex-wrap\", \"wrap\"], [\"type\", \"button\", 3, \"click\", \"disabled\"], [2, \"margin-top\", \"10px\"], [2, \"margin-top\", \"10px\", \"display\", \"flex\", \"gap\", \"24px\", \"flex-wrap\", \"wrap\"], [4, \"ngIf\"], [\"class\", \"card\", 4, \"ngIf\"], [\"class\", \"card\", \"style\", \"border:1px solid #7f1d1d; background:#1b0b0b;\", 4, \"ngIf\"], [1, \"card\", 2, \"border\", \"1px solid #7f1d1d\", \"background\", \"#1b0b0b\"]],\n        template: function PaymentsComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h2\");\n            i0.ɵɵtext(1, \"Payments \\u2014 Internal Transfer\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"div\", 0)(3, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function PaymentsComponent_Template_form_ngSubmit_3_listener() {\n              return ctx.initiate();\n            });\n            i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\");\n            i0.ɵɵtext(6, \" Customer ID \");\n            i0.ɵɵelement(7, \"input\", 3);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(8, \"label\");\n            i0.ɵɵtext(9, \" From Account \");\n            i0.ɵɵelement(10, \"input\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"label\");\n            i0.ɵɵtext(12, \" To Account \");\n            i0.ɵɵelement(13, \"input\", 5);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(14, \"label\");\n            i0.ɵɵtext(15, \" Amount \");\n            i0.ɵɵelement(16, \"input\", 6);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(17, \"label\");\n            i0.ɵɵtext(18, \" Currency \");\n            i0.ɵɵelementStart(19, \"select\", 7)(20, \"option\", 8);\n            i0.ɵɵtext(21, \"USD\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(22, \"button\", 9);\n            i0.ɵɵtext(23, \"Initiate Transfer\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(24, \"div\", 10)(25, \"button\", 11);\n            i0.ɵɵlistener(\"click\", function PaymentsComponent_Template_button_click_25_listener() {\n              return ctx.pollStatus();\n            });\n            i0.ɵɵtext(26, \"Poll Status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(27, \"button\", 11);\n            i0.ɵɵlistener(\"click\", function PaymentsComponent_Template_button_click_27_listener() {\n              return ctx.readBalances();\n            });\n            i0.ɵɵtext(28, \"Read Balances\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(29, \"div\", 12)(30, \"div\");\n            i0.ɵɵtext(31, \"paymentId: \");\n            i0.ɵɵelementStart(32, \"b\");\n            i0.ɵɵtext(33);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(34, \"div\");\n            i0.ɵɵtext(35, \"status: \");\n            i0.ɵɵelementStart(36, \"b\");\n            i0.ɵɵtext(37);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(38, \"div\", 13)(39, \"div\");\n            i0.ɵɵtext(40, \"From Balance: \");\n            i0.ɵɵtemplate(41, PaymentsComponent_b_41_Template, 2, 1, \"b\", 14)(42, PaymentsComponent_span_42_Template, 2, 0, \"span\", 14);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(43, \"div\");\n            i0.ɵɵtext(44, \"To Balance: \");\n            i0.ɵɵtemplate(45, PaymentsComponent_b_45_Template, 2, 1, \"b\", 14)(46, PaymentsComponent_span_46_Template, 2, 0, \"span\", 14);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵtemplate(47, PaymentsComponent_div_47_Template, 2, 0, \"div\", 15)(48, PaymentsComponent_div_48_Template, 4, 1, \"div\", 16);\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"formGroup\", ctx.transferForm);\n            i0.ɵɵadvance(19);\n            i0.ɵɵproperty(\"disabled\", ctx.busy || ctx.transferForm.invalid);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"disabled\", ctx.busy || !ctx.paymentId);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", ctx.busy || !ctx.transferForm.value.fromAccount || !ctx.transferForm.value.toAccount);\n            i0.ɵɵadvance(6);\n            i0.ɵɵtextInterpolate(ctx.paymentId || \"-\");\n            i0.ɵɵadvance(4);\n            i0.ɵɵtextInterpolate(ctx.status || \"-\");\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.fromBalance !== null);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.fromBalance === null);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.toBalance !== null);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.toBalance === null);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.busy);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.errorMsg);\n          }\n        },\n        dependencies: [i3.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.NumberValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName]\n      });\n    }\n  }\n  return PaymentsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}