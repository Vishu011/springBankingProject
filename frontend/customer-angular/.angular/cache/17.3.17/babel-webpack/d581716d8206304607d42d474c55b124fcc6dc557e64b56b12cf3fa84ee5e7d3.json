{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/api-client.service\";\nimport * as i2 from \"@angular/forms\";\nexport let AccountsComponent = /*#__PURE__*/(() => {\n  class AccountsComponent {\n    constructor(api, fb) {\n      this.api = api;\n      this.balance = null;\n      this.history = [];\n      this.busy = false;\n      this.errorMsg = null;\n      this.form = fb.group({\n        accountNumber: [\"\", [Validators.required]],\n        historySize: [50, [Validators.min(1)]]\n      });\n    }\n    clearError() {\n      this.errorMsg = null;\n    }\n    handleError(e) {\n      this.busy = false;\n      try {\n        if (e?.error?.message) {\n          const cid = e?.error?.correlationId ? ` | cid=${e.error.correlationId}` : \"\";\n          this.errorMsg = `${e.error.message}${cid}`;\n          return;\n        }\n      } catch {}\n      this.errorMsg = e?.message || \"Operation failed\";\n    }\n    load() {\n      if (this.form.invalid) return;\n      this.clearError();\n      this.busy = true;\n      this.balance = null;\n      this.history = [];\n      const account = this.form.value.accountNumber;\n      const size = Number(this.form.value.historySize || 50);\n      let pending = 2;\n      const done = () => {\n        pending -= 1;\n        if (pending === 0) this.busy = false;\n      };\n      // Balance\n      this.api.getBalance(account).subscribe({\n        next: b => {\n          this.balance = Number(b);\n          done();\n        },\n        error: e => {\n          this.handleError(e);\n          done();\n        }\n      });\n      // Ledger history\n      this.api.getLedgerHistory(account, size).subscribe({\n        next: list => {\n          this.history = Array.isArray(list) ? list : [];\n          done();\n        },\n        error: e => {\n          this.handleError(e);\n          done();\n        }\n      });\n    }\n    static {\n      this.ɵfac = function AccountsComponent_Factory(t) {\n        return new (t || AccountsComponent)(i0.ɵɵdirectiveInject(i1.ApiClientService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: AccountsComponent,\n        selectors: [[\"app-accounts\"]],\n        decls: 7,\n        vars: 0,\n        consts: [[1, \"card\"]],\n        template: function AccountsComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h2\");\n            i0.ɵɵtext(1, \"Accounts\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"div\", 0)(3, \"p\");\n            i0.ɵɵtext(4, \"Overview of accounts and balances will appear here.\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"p\");\n            i0.ɵɵtext(6, \"Next: wire to account-management and ledger APIs.\");\n            i0.ɵɵelementEnd()();\n          }\n        }\n      });\n    }\n  }\n  return AccountsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}