{"ast":null,"code":"import { HttpErrorResponse } from \"@angular/common/http\";\nimport { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/toast.service\";\nexport let ErrorHandlerInterceptor = /*#__PURE__*/(() => {\n  class ErrorHandlerInterceptor {\n    constructor(toast) {\n      this.toast = toast;\n    }\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(err => {\n        if (err instanceof HttpErrorResponse) {\n          const hdrCid = err.headers?.get(\"X-Correlation-Id\") || undefined;\n          // Standard error envelope (as per backend): { timestamp, status, error, message, correlationId, path }\n          const body = typeof err.error === \"object\" && err.error ? err.error : undefined;\n          const correlationId = body && typeof body.correlationId === \"string\" && body.correlationId || hdrCid;\n          let message = \"Unexpected error\";\n          if (body && typeof body.message === \"string\" && body.message) {\n            message = body.message;\n          } else if (typeof err.message === \"string\" && err.message) {\n            message = err.message;\n          } else if (err.status) {\n            message = `HTTP ${err.status}`;\n          }\n          // Surface toasts with correlationId for quick supportability\n          this.toast.error(message, correlationId);\n          // Re-throw so callers can handle if needed\n          return throwError(() => err);\n        }\n        this.toast.error(\"Network error\");\n        return throwError(() => err);\n      }));\n    }\n    static {\n      this.ɵfac = function ErrorHandlerInterceptor_Factory(t) {\n        return new (t || ErrorHandlerInterceptor)(i0.ɵɵinject(i1.ToastService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ErrorHandlerInterceptor,\n        factory: ErrorHandlerInterceptor.ɵfac\n      });\n    }\n  }\n  return ErrorHandlerInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}