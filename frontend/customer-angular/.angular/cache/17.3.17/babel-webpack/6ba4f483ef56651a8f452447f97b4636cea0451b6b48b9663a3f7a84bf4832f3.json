{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/api-client.service\";\nimport * as i2 from \"@angular/forms\";\nexport let PaymentsComponent = /*#__PURE__*/(() => {\n  class PaymentsComponent {\n    constructor(api, fb) {\n      this.api = api;\n      this.paymentId = null;\n      this.status = null;\n      this.fromBalance = null;\n      this.toBalance = null;\n      this.busy = false;\n      this.errorMsg = null;\n      this.transferForm = fb.group({\n        customerId: [null, [Validators.required, Validators.min(1)]],\n        fromAccount: [\"\", [Validators.required]],\n        toAccount: [\"\", [Validators.required]],\n        amount: [100, [Validators.required, Validators.min(0.01)]],\n        currency: [\"USD\", [Validators.required]]\n      });\n    }\n    clearError() {\n      this.errorMsg = null;\n    }\n    handleError(e) {\n      this.busy = false;\n      try {\n        if (e?.error?.message) {\n          const cid = e?.error?.correlationId ? ` | cid=${e.error.correlationId}` : \"\";\n          this.errorMsg = `${e.error.message}${cid}`;\n          return;\n        }\n      } catch {}\n      this.errorMsg = e?.message || \"Operation failed\";\n    }\n    initiate() {\n      if (this.transferForm.invalid) return;\n      this.clearError();\n      this.busy = true;\n      const {\n        customerId,\n        fromAccount,\n        toAccount,\n        amount,\n        currency\n      } = this.transferForm.value;\n      this.api.initiateInternalTransfer({\n        customerId: Number(customerId),\n        fromAccount,\n        toAccount,\n        amount: Number(amount),\n        currency\n      }).subscribe({\n        next: res => {\n          this.paymentId = res.paymentId || null;\n          this.status = res.status || null;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    pollStatus() {\n      if (!this.paymentId) return;\n      this.clearError();\n      this.busy = true;\n      this.api.getPaymentStatus(this.paymentId).subscribe({\n        next: s => {\n          this.status = typeof s === \"string\" ? s : s?.status || this.status;\n          this.busy = false;\n        },\n        error: e => this.handleError(e)\n      });\n    }\n    readBalances() {\n      const {\n        fromAccount,\n        toAccount\n      } = this.transferForm.value;\n      if (!fromAccount || !toAccount) return;\n      this.clearError();\n      this.busy = true;\n      let pending = 2;\n      const done = () => {\n        pending -= 1;\n        if (pending === 0) this.busy = false;\n      };\n      this.api.getBalance(fromAccount).subscribe({\n        next: b => {\n          this.fromBalance = Number(b);\n          done();\n        },\n        error: e => {\n          this.handleError(e);\n          done();\n        }\n      });\n      this.api.getBalance(toAccount).subscribe({\n        next: b => {\n          this.toBalance = Number(b);\n          done();\n        },\n        error: e => {\n          this.handleError(e);\n          done();\n        }\n      });\n    }\n    static {\n      this.ɵfac = function PaymentsComponent_Factory(t) {\n        return new (t || PaymentsComponent)(i0.ɵɵdirectiveInject(i1.ApiClientService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: PaymentsComponent,\n        selectors: [[\"app-payments\"]],\n        decls: 5,\n        vars: 0,\n        consts: [[1, \"card\"]],\n        template: function PaymentsComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h2\");\n            i0.ɵɵtext(1, \"Payments\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"div\", 0)(3, \"p\");\n            i0.ɵɵtext(4, \"Internal transfer form and status will be added here.\");\n            i0.ɵɵelementEnd()();\n          }\n        }\n      });\n    }\n  }\n  return PaymentsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}