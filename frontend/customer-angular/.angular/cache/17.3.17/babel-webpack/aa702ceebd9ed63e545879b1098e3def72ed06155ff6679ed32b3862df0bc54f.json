{"ast":null,"code":"import { HttpResponse } from \"@angular/common/http\";\nimport { tap } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nfunction guid() {\n  // lightweight GUID\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0,\n      v = c == \"x\" ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\nexport let CorrelationIdInterceptor = /*#__PURE__*/(() => {\n  class CorrelationIdInterceptor {\n    intercept(req, next) {\n      const cidHdr = environment.xCorrelationIdHeader || \"X-Correlation-Id\";\n      const cid = guid();\n      const cloned = req.clone({\n        setHeaders: {\n          [cidHdr]: cid\n        }\n      });\n      return next.handle(cloned).pipe(tap(evt => {\n        if (evt instanceof HttpResponse) {\n          const respCid = evt.headers.get(cidHdr);\n          if (respCid) {\n            // Could surface in a toast or console for support correlation\n            // console.log(\"CorrelationId:\", respCid);\n          }\n        }\n      }));\n    }\n    static {\n      this.ɵfac = function CorrelationIdInterceptor_Factory(t) {\n        return new (t || CorrelationIdInterceptor)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CorrelationIdInterceptor,\n        factory: CorrelationIdInterceptor.ɵfac\n      });\n    }\n  }\n  return CorrelationIdInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}