spring:
  application:
    name: api-gateway # Name for Eureka registration
  cloud:
    config:
      enabled: false
      import-check:
        enabled: false
    gateway:
      server:
        webflux:
          globalcors:
            add-to-simple-url-handler-mapping: true
            cors-configurations:
              '[/**]':
                allowedOrigins:
                  - http://localhost:4200
                  - http://localhost:4300
                allowedMethods:
                  - GET
                  - POST
                  - PUT
                  - DELETE
                  - OPTIONS
                  - PATCH
                allowedHeaders:
                  - "*"
                allowCredentials: true
                maxAge: 3600
      discovery:
        locator:
          enabled: true # Enable discovery locator for automatic routing based on service IDs
          lower-case-service-id: true # Convert service IDs to lowercase for matching
      routes:
        # User Service Routes
        - id: user_service
          uri: lb://user-service # Load balance across instances of 'user-service' registered in Eureka
          predicates:
            - Path=/auth/** # Matches requests starting with /auth/
          filters:
            - name: RewritePath
              args:
                regexp: '/auth(?<segment>/?.*)'
                replacement: '/auth/${segment}' # Preserves /auth path for the user-service
            # Note: The User Service's controller has @RequestMapping("/auth").
            # So, the path needs to be preserved. If your downstream service's controller
            # didn't have a base @RequestMapping, you'd rewrite to just '/${segment}'.

        # Account Service Routes
        - id: account_service
          uri: lb://account-service
          predicates:
            - Path=/accounts/**
          filters:
            - name: RewritePath
              args:
                regexp: '/accounts(?<segment>/?.*)'
                replacement: '/accounts/${segment}' # Preserves /accounts path for the account-service

        # Transaction Service Routes
        - id: transaction_service
          uri: lb://transaction-service
          predicates:
            - Path=/transactions/**
          filters:
            - name: RewritePath
              args:
                regexp: '/transactions(?<segment>/?.*)'
                replacement: '/transactions/${segment}' # Preserves /transactions path for the transaction-service

        # Notification Service Routes
        - id: notification_service
          uri: lb://notification-service
          predicates:
            - Path=/notifications/**
          filters:
            - name: RewritePath
              args:
                regexp: '/notifications(?<segment>/?.*)'
                replacement: '/notifications/${segment}' # Preserves /notifications path for the notification-service

        # Loan Service Routes (Assuming loan-service on port 8004, base path /loans)
        - id: loan_service
          uri: lb://loan-service
          predicates:
            - Path=/loans/**
          filters:
            - name: RewritePath
              args:
                regexp: '/loans(?<segment>/?.*)'
                replacement: '/loans/${segment}' # Preserves /loans path for the loan-service

        # Card Service Routes (Assuming card-service on port 8005, base path /cards)
        - id: credit-card-service
          uri: lb://credit-card-service
          predicates:
            - Path=/cards/**
          filters:
            - name: RewritePath
              args:
                regexp: '/cards(?<segment>/?.*)'
                replacement: '/cards/${segment}' # Preserves /cards path for the card-service

  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration
      - org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration

server:
  port: 9010 # The single entry point for your frontend (e.g., Angular app)

logging:
  level:
    org:
      springframework:
        cloud:
          gateway: DEBUG # Enable detailed Gateway logging
        security: DEBUG # Enable detailed Spring Security logging
      hibernate: ERROR
      io.github.resilience4j: DEBUG
    reactor:
      netty: DEBUG # For Netty (Webflux server) debugging
  pattern:
   level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

# Eureka Client Configuration (essential for service discovery)
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka # Point to your Eureka Server's URL
  instance:
    preferIpAddress: true # Optional: Good for containerized environments

management:
  tracing:
    sampling:
      probability: 1.0
    export:
      zipkin:
        enabled: false
